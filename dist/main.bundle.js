"use strict";

var Data = {
  "about_me": "\n      <img style=\"float:left;padding: 0px 15px 15px 0px;\" src=\"images/eu.jpg\" widht=\"104\" height=\"105\" />\n      <p>Hi, I'm a professional software developer, interested in a wide range of topics: web development, e-commerce, graphics programming, automated testing, blockchain.... You can browse through my previous works in the other column.  \n      </p>\n\t<p>This webpage is itself a game. You can control the main character that appears in the middle of the screen using the cursor keys and it should avoid colliding with the big enemy balls. Most of the text is rendered using Javascript. \n      <p>\n      Some time ago I started to contribute and/or helped to initialize a few Open Source projects. Please don't hesitate on contact me in order to collaborate or ask any question about them. \n      </p>\n        <p>You can find me on <a href=\"http://twitter.com/galchwyn\">Twitter</a>,\n          <a href=\"http://facebook.com/manel.villar\">Facebook</a>,\n          <a href=\"http://http://es.linkedin.com/in/manelvillar\" >LinkedIn</a>,\n          <a href=\"http://github.com/manelvf\">Github</a>,\n\t      <a href=\"https://www.slideshare.net/manelvillar/\">Slideshare</a>\n          or simply by <a href=\"mailto:eu@manel.pro\" >email</a>.\n\t",

  "links": "\n\t<p>You might be interested in checking my technical blog: <a href=\"/blog\">The Fallen Apples</a>. I write sometimes in <a href=\"https://medium.com/@fallenapples\">Medium</a> too.\n\t</p>\n      <p>These are my <a href=\"http://js1k.com\">JS1K</a> and JS demo entries:</p>\n      <ul class=\"square\">\n        <li><a href=\"http://js1k.com/2010-first/demos/38\">Pulse</a>. A light \"pulsar\" made for the first compo (2010)</li>\n        <li><a href=\"http://js1k.com/2012-love/demo/1025\">Hidden Love</a>. Entry for 2012 compo, themed \"Love\"</li>\n        <li><a href=\"https://www.manel.pro/drones\">Battle of the Drones</a>. Entry for <a href=\"http://ludumdare.com\">Ludum Dare 25</a></li>\n      </ul>\n\n        <ul class=\"square\">\n          <li><a href=\"http://https://vimeo.com/album/93295\" >Ilion Tools</a>: Some videos made from the tools developed on Ilion Animation Studios [ExtJS] (2007-2009).</li>\n        </ul>\n\n\t"
};
"use strict";

// return -1 or 1
function getRandomSign() {
  var v = Math.round(Math.random());
  if (v == 0) return -1;else return 1;
}

function getRandomWithLimit(min, max) {
  var v = void 0;

  do {
    // search for a nice value. If not found, try again
    v = Math.round(Math.random() * (max - min)) + min;
  } while (v > max * App.borderLimit && v < max - max * App.borderLimit);

  return v;
}

function zeropad(v, n) {
  var z = n - String(v).length;
  var s = "";
  for (var c = 0; c < z; c++) {
    s += "0";
  }
  return s + v;
}

function Ball(ctx) {
  this.ctx = ctx;
}

Ball.prototype.init = function (radius) {
  this.dx = getRandomSign();
  this.dy = getRandomSign();
  this.x = getRandomWithLimit(0, App.availW);
  this.y = getRandomWithLimit(0, App.availH);
  this.radius = radius || App.ball_radius || 50;
};

Ball.prototype.draw = function () {
  var ctx = App.ctx;
  ctx.fillStyle = "rgba(100, 255, 205, 0.5)";
  ctx.strokeStyle = "rgba(50, 200, 100, 0.8)";
  ctx.beginPath();
  ctx.arc(this.x, this.y, this.radius, 0, Math.PI * 2, true);
  ctx.fill();
  ctx.stroke();
};

Ball.prototype.move = function () {
  this.x += this.dx;
  this.y += this.dy;

  if (this.x + this.radius > App.availW) this.dx = -1;else if (this.x - this.radius < 0) this.dx = 1;

  if (this.y + this.radius > App.availH) this.dy = -1;else if (this.y - this.radius < 0) this.dy = 1;
};

var App = {
  balls: [],
  ball_radius: 35,
  n_of_balls: 7,
  keypressed: [],
  keyListeners: [], // functions to listen for keys pressed
  availW: 0,
  availH: 0,
  PERIOD: 1000 / 30, // millisenconds
  borderLimit: 0.25 // for new balls
};

function Hero() {}

Hero.prototype.init = function () {
  this.points = 0;
  this.x = App.availW / 2;
  this.y = App.availH / 2;
  this.radius = 40;
  if (this.keyEvent) delete App.keyListeners[this.keyEvent - 1];
  this.keyEvent = App.keyListeners.push(this.checkMovement());
};

Hero.prototype.draw = function () {
  var ctx = App.ctx;
  ctx.fillStyle = "rgba(255, 100, 100, 0.5)";
  ctx.fillRect(this.x - 20, this.y - 20, 40, 40);
  ctx.strokeStyle = "rgba(155, 50, 50, 0.8)";
  ctx.strokeRect(this.x - 20, this.y - 20, 40, 40);

  ctx.fillStyle = "rgba(255, 255, 100, 0.5)";
  ctx.beginPath();
  ctx.arc(this.x, this.y, 12, 0, Math.PI, false); // Mouth (clockwise)
  ctx.moveTo(this.x - 10, this.y - 10);
  ctx.arc(this.x - 10, this.y - 10, 5, 0, Math.PI * 2, true); // Left eye
  ctx.moveTo(this.x + 10, this.y - 10);
  ctx.arc(this.x + 10, this.y - 10, 5, 0, Math.PI * 2, true); // Right eye
  ctx.stroke();
};

Hero.prototype.checkMovement = function () {
  var that = this;

  return function () {

    if (App.keypressed[37]) {
      that.x--;
      that.points++;
    }
    if (App.keypressed[39]) {
      that.x++;
      that.points++;
    }
    if (App.keypressed[38]) {
      that.y--;
      that.points++;
    }
    if (App.keypressed[40]) {
      that.y++;
      that.points++;
    }
  };
};

var hero = new Hero();

function doMovements() {
  for (var k = 0; k < App.keyListeners.length; k++) {
    if (typeof App.keyListeners[k] == "function") App.keyListeners[k]();
  }
}

function draw() {
  var ctx = App.ctx;
  var balls = App.balls;

  ctx.clearRect(0, 0, App.availW, App.availH); // clear canvas
  ctx.save();

  hero.draw();

  for (var k = 0; k < balls.length; k++) {
    var b = balls[k];
    b.move();
    b.draw();
  }

  ctx.fillStyle = "rgba(100, 100, 255, 0.8)";
  ctx.fillText(zeropad(hero.points, 8), App.availW * (2 / 3), 40);
  ctx.fillStyle = "rgba(100, 100, 255, 0.6)";
  ctx.fillText("Use the Arrow Keys to SURVIVE!", App.availW * (3 / 7), App.availH * (2 / 3));

  ctx.restore();

  window.requestAnimationFrame(draw);
}

function checkPositions(el1, el2) {
  var dx = el1.x - el2.x;
  var dy = el1.y - el2.y;

  var d = Math.sqrt(dx * dx + dy * dy);
  var r = el1.radius + el2.radius;

  if (r > d) return true;else return false;
}

function checkMovements() {
  var balls = App.balls;

  for (var k = 0; k < balls.length; k++) {
    if (checkPositions(hero, balls[k])) {
      hero.init();
    }
    if (checkPositions(balls[k], balls[(k + 1) % balls.length])) {
      balls[k].dx *= -1;
      balls[k].dy *= -1;
      balls[k].x += balls[k].dx * 3;
      balls[k].y += balls[k].dy * 3;
      var b = balls[(k + 1) % balls.length];
      b.dx *= -1;
      b.dy *= -1;
      b.x += b.dx * 2;
      b.y += b.dy * 2;
    }
  }
}

function init() {
  var winW = void 0,
      winH = void 0;

  if (document.body && document.body.offsetWidth) {
    winW = document.body.offsetWidth;
    winH = document.body.offsetHeight;
  }
  if (document.compatMode == 'CSS1Compat' && document.documentElement && document.documentElement.offsetWidth) {
    winW = document.documentElement.offsetWidth;
    winH = document.documentElement.offsetHeight;
  }
  if (window.innerWidth && window.innerHeight) {
    winW = window.innerWidth;
    winH = window.innerHeight;
  }

  var el = document.getElementById("screenFrame");
  el.style["background-color"] = "transparent";
  el.style["color"] = "red";
  el.style.left = "0px";
  el.style.top = "0px";
  el.style.width = winW + "px";
  el.style.height = winH + "px";
  el.style.display = "block";

  var frame = document.getElementById("frame");
  frame.width = winW;
  frame.height = winH;

  App.availW = winW;
  App.availH = winH;
  App.frame = frame;

  if (frame.getContext) {
    App.ctx = frame.getContext("2d");
    App.ctx.font = "20pt Arial";

    var i = 0;

    var _loop = function _loop() {
      var b = new Ball(App.ctx);
      b.init();

      var collisions = App.balls.filter(function (ball) {
        return checkPositions(b, ball);
      });
      if (collisions.length) {
        return "continue";
      }

      App.balls.push(b);
      i++;
    };

    while (i < App.n_of_balls) {
      var _ret = _loop();

      if (_ret === "continue") continue;
    }

    hero.init();

    window.onkeydown = function (e) {
      App.keypressed[e.which] = true;
    };
    window.onkeyup = function (e) {
      App.keypressed[e.which] = false;
    };

    App.frame.addEventListener("touchstart", handleTouchStart, false);
    App.frame.addEventListener("touchend", handleTouchEnd, false);

    window.requestAnimationFrame(draw);
    setInterval(checkMovements, 1000 / 30);
    setInterval(doMovements, 1000 / 30);
  }

  function handleTouchStart(evt) {
    evt.preventDefault();
    console.log("touchstart.");
    var touches = evt.changedTouches;

    for (var i = 0; i < touches.length; i++) {
      console.log("touchstart:" + i + "..." + touches[i]);
      console.log("touchstart:" + i + ".");
    }
  }

  function handleTouchEnd(evt) {
    evt.preventDefault();
    var touches = evt.changedTouches;

    for (var i = 0; i < touches.length; i++) {
      console.log(touches[i]);
    }
  }
}
"use strict";

// init 
ready(function () {
  expand_json();

  init();
});

function intitle(str) {
  return "<h3>" + (str.charAt(0).toUpperCase() + str.slice(1)).replace("_", " ") + "</h3>";
}

function expand_json() {
  for (var key in Data) {
    document.getElementById(key).innerHTML = intitle(key) + Data[key];
  }
}

function ready(fn) {
  if (document.attachEvent ? document.readyState === "complete" : document.readyState !== "loading") {
    fn();
  } else {
    document.addEventListener('DOMContentLoaded', fn);
  }
}

function toggleClass(el, className) {
  if (el.classList) {
    el.classList.toggle(className);
  } else {
    var classes = el.className.split(' ');
    var existingIndex = classes.indexOf(className);

    if (existingIndex >= 0) classes.splice(existingIndex, 1);else classes.push(className);

    el.className = classes.join(' ');
  }
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,